package eu.kartoffelquadrat.svgpatcher;

import static eu.kartoffelquadrat.svgpatcher.XmlNodelistIteratorTools.asList;

import java.util.LinkedList;
import java.util.List;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * ID patcher extension. Utility class to replace Omnigraffle object name tags by node id
 * attributes. Replaces all title elements that start with "VID" prefix by proper ID tags. Removes
 * all remaining title tags, to ensure browser does not display popups on hover.
 *
 * @author Maximilian Schiedermeier 2022
 */
public class IdPatcher extends Patcher {

  /**
   * Constructor for ID Patcher utility class.
   *
   * @param svg the raw svg document object
   */
  public IdPatcher(Document svg) {
    super(svg);
  }

  /**
   * This method does the actual DOM transformation we are interested in. If in Omnigraffle an
   * object is marked with something like "VID-XYZ", where VID is a standard prefix for "Vector
   * Identifier" and "XYZ" is the actual unique name describing the purpose of the object, then we
   * ant to set this entire string as "id" in the dom. Similarly, the transformer detects objects
   * marked with a "TID-" prefix, for "template ID". In the SVG generated by omnigraffle we have
   * something like: (Tags removed so javadoc plugin is not confused) g id="Graphic_3"
   * titleVID-SQUARE1/title rect x="230.8" y="193.9" width="105" height="105" fill="#40ff40"/ rect
   * x="230.8" y="193.9" width="105" height="105" stroke="black" stroke-linecap="round"
   * stroke-linejoin="round" stroke-width="1"/ text transform="translate(235.8 237.176)"
   * fill="black" tspan font-family="Helvetica Neue" font-size="16" font-weight="400" fill="black"
   * x="34.156" y="15" 361/tspan /text /g What we want is: g id="VID-SQUARE1" rect x="230.8"
   * y="193.9" width="105" height="105" fill="#40ff40"/ rect x="230.8" y="193.9" width="105"
   * height="105" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/
   * text transform="translate(235.8 237.176)" fill="black" tspan font-family="Helvetica Neue"
   * font-size="16" font-weight="400" fill="black" x="34.156" y="15" 361/tspan /text /g p This
   * method handles this transformation for an entire svg document.
   *
   * @return the same svg object as provided as input, internally patched.
   */
  @Override
  public Document execute() {

    // This detects all "title" elements. (Which includes all VIDs / TIDs set in Omnigraffle.
    // Note that the elements of interested are all encompassed in a  parent group "<g>" node.
    // The below loop iterates over the title elements, not the "g" elements.
    NodeList allTitleNodes = svg.getElementsByTagName("title");
    System.out.println("Found " + allTitleNodes.getLength() + " <title> nodes in DOM.");
    List<Node> elementsStagedForRemoval = new LinkedList<>();
    for (Node titleNode : asList(allTitleNodes)) {

      // All title element must be removed, not just the ones with VID/TID prefix. Reason is that
      // otherwise the browser creates hover overlay artifacts.
      elementsStagedForRemoval.add(titleNode);

      // Get a hold of the parent <g> node, enclosing any <title> node we iterate over in this loop.
      Element parentGroupNode = (Element) titleNode.getParentNode();

      // If and only if the value of that node has the OmniGraffle prefix "VID-" or "TID" (Vector
      // ID / Template ID)...
      // ... then add this element value as an actual ID of its parent node
      if (isMarkedVectorElement(titleNode) || isMarkedTemplateElement(titleNode)) {
        // Amend the parent <g> node by an "id" attribute and mark the title node for deletion.
        parentGroupNode.setAttribute("id", titleNode.getTextContent());
      }

      // Only if this is a template (TID) marked node: ensure the payload is limited to a single
      // rect element (besides title), and use rects x/y offset as additional translate
      // information for node parent.
      if (isMarkedTemplateElement(titleNode)) {
        // Ensure the enclosing group has not other elements but the title and empty background
        // rectangle.
        ensureTemplateIsFlat(parentGroupNode);

        // Now that we know the structure is valid, access the one and only rect element
        // contained in the parent, and use the x/y coordinates to mark translation in the parent.
        Element rectangle = (Element) parentGroupNode.getElementsByTagName("rect").item(0);
        String rectX = rectangle.getAttribute("x");
        String rectY = rectangle.getAttribute("y");
        parentGroupNode.setAttribute("transform", "translate(" + rectX + "," + rectY + ")");

        // Remove x/y information from rectangle, is implicit by the newly added parent translation.
        rectangle.removeAttribute("x");
        rectangle.removeAttribute("y");
        // elementsStagedForRemoval.add(rectangle);
      }
    }

    // Now that iteration over original document tree is finished, remove the obsolete elements.
    for (Node obsoleteTitleNodes : elementsStagedForRemoval) {
      obsoleteTitleNodes.getParentNode().removeChild(obsoleteTitleNodes);
    }

    return svg;
  }

  /**
   * Analyzes the internal DOM structure of the "g" element containing a TID marked title. There
   * must not be any other elements inside than the title and the rect.
   *
   * @param parentGroupNode as the g element containing the TID tagged title element.
   */
  private void ensureTemplateIsFlat(Element parentGroupNode) {

    // The root note actually has more nodes than actual DOM elements. To filter down to only the
    // elements (deep), we use the asterisk operator.
    NodeList templateContainedElements = parentGroupNode.getElementsByTagName("*");
    Element firstElement = (Element) templateContainedElements.item(0);
    Element secondElement = (Element) templateContainedElements.item(1);

    if (!firstElement.getTagName().equals("title") && !secondElement.getTagName().equals("rect")) {
      throw new MalformedDocumentException(
          "Found a template indicator, but the internal structure contains more elements than it "
              + "should. TID marked elements must only have a stroke-less, mono-coloured rectangle."
              + "Other elements or deep structures are not allowed, since TID marks a template"
              + "placeholder and all content will be replaced.");
    }
  }

  private boolean isMarkedVectorElement(Node node) {
    return isNodeTitlePrefixMatch(node, "VID-");
  }

  private boolean isMarkedTemplateElement(Node node) {
    return isNodeTitlePrefixMatch(node, "TID-");
  }

  private boolean isNodeTitlePrefixMatch(Node node, String prefix) {
    return node.getTextContent().startsWith(prefix);
  }
}
