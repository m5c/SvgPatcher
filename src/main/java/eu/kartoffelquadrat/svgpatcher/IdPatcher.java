package eu.kartoffelquadrat.svgpatcher;

import static eu.kartoffelquadrat.svgpatcher.XmlNodelistIteratorTools.asList;

import java.util.LinkedList;
import java.util.List;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * ID patcher extension. Utility class to replace Omnigraffle object name tags by node id
 * attributes. Replaces all title elements that start with "VID" prefix by proper ID tags. Removes
 * all remaining title tags, to ensure browser does not display popups on hover.
 *
 * @author Maximilian Schiedermeier 2022
 */
public class IdPatcher extends Patcher {

  /**
   * Constructor for ID Patcher utility class.
   *
   * @param svg the raw svg document object
   */
  public IdPatcher(Document svg) {
    super(svg);
  }

  /**
   * This method does the actual DOM transformation we are intested in. If in Omnigraffle an object
   * is marked with something like "VID-XYZ", where VID is a standard prefix for "Vector Identifier"
   * and "XYZ" is the actual unique name describing the purpose of the object, then we ant to set
   * this entire string as "id" in the dom. In the SVG generated by omnigraffle we have something
   * like: (Tags removed so javadoc plugin is not confused) g id="Graphic_3" titleVID-SQUARE1/title
   * rect x="230.8" y="193.9" width="105" height="105" fill="#40ff40"/ rect x="230.8" y="193.9"
   * width="105" height="105" stroke="black" stroke-linecap="round" stroke-linejoin="round"
   * stroke-width="1"/ text transform="translate(235.8 237.176)" fill="black" tspan
   * font-family="Helvetica Neue" font-size="16" font-weight="400" fill="black" x="34.156" y="15"
   * 361/tspan /text /g What we want is: g id="VID-SQUARE1" rect x="230.8" y="193.9" width="105"
   * height="105" fill="#40ff40"/ rect x="230.8" y="193.9" width="105" height="105" stroke="black"
   * stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/ text
   * transform="translate(235.8 237.176)" fill="black" tspan font-family="Helvetica Neue"
   * font-size="16" font-weight="400" fill="black" x="34.156" y="15" 361/tspan /text /g p This
   * method handles this transformation for an entire svg document.
   *
   * @return the same svg object as provided as input, internally patched.
   */
  @Override
  public Document execute() {
    NodeList titleElements = svg.getElementsByTagName("title");
    System.out.println("Found " + titleElements.getLength() + " title elements");
    List<Node> stagedForRemoval = new LinkedList<>();
    for (Node node : asList(titleElements)) {

      // If and only if the value of that node has the OmniGraffle prefix "VID-" (Vector ID)...
      // ... then add this element value as an actual ID of its parent node
      if (node.getTextContent().startsWith("VID-")) {
        ((Element) node.getParentNode()).setAttribute("id", node.getTextContent());
      }
      stagedForRemoval.add(node);

    }

    // Now that iteration over original document tree is finished, remove the obsolete elements.
    // Now that iteration over original document tree is finished, remove the obsolete elements.
    for (Node obsoleteNode : stagedForRemoval) {
      obsoleteNode.getParentNode().removeChild(obsoleteNode);
    }

    return svg;
  }
}
